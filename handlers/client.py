import html
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from create_bot import bot, bot_address, dp
from keyboards import kb_client, kb_start
from school_database import sqlite_db
from handlers.payment import payment_handler, successful_payment
from school_database.sqlite_db import get_support


# Handler for /start and /help
async def start_bot(message: types.Message):
    user_id = message.from_user.id
    print("user id is", user_id)
    sqlite_db.save_new_user(message.from_user)
    if not sqlite_db.get_user_payment_status(user_id):      #–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç–æ–º
        try:
            await bot.send_message(message.chat.id,
                                   f'–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É!\n'
                                   f'–¢—ã —Å–¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –Ω–æ–≤—ã–º –∑–Ω–∞–Ω–∏—è–º, —Ä–∞–∑–≤–∏—Ç–∏—é –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –ø–µ—Ä–µ–º–µ–Ω–∞–º!\n\n'
                                   f'–¢—É—Ç –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –Ω–∞—à –∫–ª—É–± –∏ –æ—Ç–º–µ–Ω–∏—Ç—å –µ–µ. –ñ–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥',
                                   reply_markup=kb_start)
            await message.delete()
            return
        except Exception as e:
            await message.reply(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –õ–°1: {bot_address}\n\n–û—à–∏–±–∫–∞: {str(e)}')

    try:                                   #–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å
        await bot.send_message(message.chat.id,
                               f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –í—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É.\n\n'
                               f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –Ω–∞—à–µ–º —Ü–µ–Ω—Ç—Ä–µ.',
                               reply_markup=kb_client)
        await message.delete()
    except Exception as e:
        await message.reply(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –õ–°2: {bot_address}\n\n–û—à–∏–±–∫–∞: {str(e)}')

@dp.callback_query_handler(lambda c: c.data.startswith('client_start_'))
async def handle_payment(cb: types.CallbackQuery):
    param = cb.data.split('_')[-1]
    user_id = cb.message.from_user.id
    message = cb.message
    if param == 'payment':
        await message.answer(f'üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü ‚Äî 8000 —Ç–≥ \n'
                       f'–ú–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ –≤–Ω–∏–∑—Éüëá\n'
                       f'–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ, —á—Ç–æ–±—ã –º—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –¥–æ—Å—Ç—É–ø.')
        await payment_handler(message) #–æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–¥

    if param == 'info':
        await message.answer('–í–æ—Ç —á—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç:\n\n'
                             f'üìå –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –≤–∏–¥–µ–æ–∫—É—Ä—Å—ã\n'
                             f'–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü —Ç–µ–±—è –∂–¥—ë—Ç –Ω–æ–≤—ã–π –∫—É—Ä—Å ‚Äî —Å–º–æ—Ç—Ä–∏, —É—á–∏—Å—å –∏ –ø—Ä–∏–º–µ–Ω—è–π –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ!\n'
                             f'üí° –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø–æ–ª—å–∑–∞\n'
                             f'–°–æ–≤–µ—Ç—ã, –∑–∞–¥–∞–Ω–∏—è, –º–æ—Ç–∏–≤–∞—Ü–∏—è –∏ —Ñ–∏—à–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ä–∞—Å—Ç–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n\n'
                             f'üéô –ñ–∏–≤—ã–µ —ç—Ñ–∏—Ä—ã –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é\n'
                             f'–û–±—â–∞–µ–º—Å—è, –æ–±—Å—É–∂–¥–∞–µ–º –≤–∞–∂–Ω–æ–µ, –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –≤ –ø—Ä—è–º–æ–º —ç—Ñ–∏—Ä–µ!\n\n'
                             f'ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç –∫—É—Ä–∞—Ç–æ—Ä–æ–≤\n'
                             f'–ù–∞—à–∏ –∫—É—Ä–∞—Ç–æ—Ä—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏:\n'
                             f'‚úÖ –û—Ç–≤–µ—Ç—è—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n'
                             f'‚úÖ –ü–æ–º–æ–≥—É—Ç —Å –∑–∞–¥–∞–Ω–∏—è–º–∏\n'
                             f'‚úÖ –û—Ä–≥–∞–Ω–∏–∑—É—é—Ç —á–µ–ª–ª–µ–Ω–¥–∂–∏, —á—Ç–æ–±—ã —Ç–µ–±–µ –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∏ —Ç—ã –Ω–µ –±—Ä–æ—Å–∞–ª –Ω–∞—á–∞—Ç–æ–µ!\n\n'
                             f'üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü ‚Äî 8000 —Ç–≥\n'
                             f'–ú–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" –≤–Ω–∏–∑—Éüëá\n'
                             f'–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ, —á—Ç–æ–±—ã –º—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –¥–æ—Å—Ç—É–ø.',
                             reply_markup=kb_start)
        await message.delete()
    if param == 'support':
        await message.answer('–ï—Å–ª–∏ —É –≤–∞—Å –µ—â–µ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã —Ç–æ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–µ–ª–µ–≥—Ä–∞–º —Ö—ç–Ω–ª—É\n'
                             'Sandugash - @Sakokas',
                             reply_markup=kb_start)


async def get_main_channel(message: types.Message):
    if not sqlite_db.get_user_payment_status(message.from_user.id):
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫—É—Ä—Å–∞',
                       reply_markup=kb_start)
        await message.delete()
        return

    text = (
        '–í–æ—Ç –Ω–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª —Å –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–æ–º –∏ —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏:\n'
    )

    await bot.send_message(
        message.chat.id,
        text,
        reply_markup= InlineKeyboardMarkup(row_width = 2).add(InlineKeyboardButton(text= "–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª!!", url="https://t.me/+5_06M-kpB-ozMDRi")),
        parse_mode=types.ParseMode.HTML
    )


async def get_courses(message: types.Message):
    if not sqlite_db.get_user_payment_status(message.from_user.id):
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫—É—Ä—Å–∞',
                       reply_markup=kb_start)
        await message.delete()
        return

    courses = sqlite_db.load_courses_text()
    if not courses:
        await bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞.")
        return

    # 1) build the text body
    lines = ["<b>–°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤:</b>"]
    for c in courses:
        name = html.escape(c['name'])
        desc = html.escape(c['description'])
        lines.append(f"\n<b>{name}</b>\n{desc}")
    text = "\n".join(lines)

    # 2) build the inline keyboard
    kb = types.InlineKeyboardMarkup(row_width=1)
    for c in courses:
        name = html.escape(c['name'])
        url  = c['url']
        kb.add(types.InlineKeyboardButton(
            text=f"–ü–µ—Ä–µ–π—Ç–∏ –∫ ¬´{name}¬ª",
            url=url
        ))

    # 3) send!
    await bot.send_message(
        chat_id=message.chat.id,
        text=text,
        parse_mode=types.ParseMode.HTML,
        disable_web_page_preview=True,
        reply_markup=kb
    )


# Handler for "–ö–æ–Ω—Ç–∞–∫—Ç—ã"
async def get_contacts(message: types.Message):
    address = "English's Street, 00/00"
    phones = '+000 000-00-00'
    await bot.send_message(message.chat.id, f'–ê–¥—Ä–µ—Å —à–∫–æ–ª—ã: {address} \n–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {phones}')

# Handler for "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"
async def get_work_hours(message: types.Message):
    w_days = '–ø–Ω-–≤—Å'
    w_hours = '06.30‚Äì22.30'
    await bot.send_message(message.chat.id, f'–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {w_days} {w_hours}')

# Handler for "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
async def get_training_courses(message: types.Message):
    await sqlite_db.sql_read_from_courses(message)

# Handler for "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏"
async def get_support(message: types.Message):
    if not sqlite_db.get_user_payment_status(message.from_user.id):
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫—É—Ä—Å–∞',
                       reply_markup=kb_start)
        await message.delete()
        return
    await sqlite_db.sql_read_from_teachers(message)

# Handler for random message
async def random_message(message: types.Message):
    if not sqlite_db.get_user_payment_status(message.from_user.id):
        await start_bot(message)
    else:
        await bot.send_message(message.chat.id,
            f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –í—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É.\n\n'
            f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –Ω–∞—à–µ–º —Ü–µ–Ω—Ç—Ä–µ.',
            reply_markup=kb_client)

# Register handlers
def handlers_register(dp: Dispatcher):
    print('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –∫–ª–∏–µ–Ω—Ç–∞')
    dp.register_message_handler(start_bot, commands=['start', 'help'])
    dp.register_message_handler(get_main_channel, Text(equals='–û—Å–Ω–æ–≤–Ω–æ–π –ö–∞–Ω–∞–ª', ignore_case=True))
    dp.register_message_handler(get_courses, Text(equals='–ö—É—Ä—Å—ã', ignore_case=True))
    dp.register_message_handler(get_contacts, Text(equals='–ö–æ–Ω—Ç–∞–∫—Ç—ã', ignore_case=True))
    dp.register_message_handler(get_work_hours, Text(equals='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã', ignore_case=True))
    dp.register_message_handler(get_support, Text(equals='–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏', ignore_case=True))
    dp.register_message_handler(random_message)
