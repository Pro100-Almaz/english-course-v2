import os
import sqlite3
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
from aiogram.types.message import ContentType
from aiogram.dispatcher.filters.state import State, StatesGroup
from create_bot import dp, bot, client_commands
from school_database import sqlite_db as db

logging.basicConfig(
    level=logging.INFO
)

# Get provider token from environment variable
PROVIDER_TOKEN = os.getenv("PROVIDER_TOKEN")  # from BotFather
CURRENCY       = "KZT"                        # or "USD", "EUR", etc.

# For testing, you can set a test token
if not PROVIDER_TOKEN:
    PROVIDER_TOKEN = "1234567890:TEST_TOKEN"  # Replace with your actual test token
    logging.warning("Using test provider token. Set PROVIDER_TOKEN environment variable for production.")

PRICE = types.LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü", amount=1000*100)  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö (—Ä—É–±)

class PaymentState(StatesGroup):
    awaiting_payment = State()


# 1) /buy command: send the invoice
async def payment_handler(message: types.Message):
    await successful_payment(message)
    # if not PROVIDER_TOKEN:
    #     await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    #     return
    #
    # try:
    #     if PROVIDER_TOKEN.split(':')[1] == 'TEST':
    #         await bot.send_message(message.chat.id, "üß™ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã.")
    #
    #     await bot.send_invoice(
    #         message.chat.id,
    #         title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
    #         description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞ –Ω–∞ 1 –º–µ—Å—è—Ü",
    #         provider_token=PROVIDER_TOKEN,
    #         currency=CURRENCY,
    #         photo_url="https://www.aroged.com/wp-content/uploads/2022/06/Telegram-has-a-premium-subscription.jpg",
    #         photo_width=416,
    #         photo_height=234,
    #         photo_size=416,
    #         is_flexible=False,
    #         prices=[PRICE],
    #         start_parameter="one-month-subscription",
    #         payload="test-invoice-payload"
    #     )
    # except Exception as e:
    #     logging.error(f"Error sending invoice: {e}")
    #     await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    #

# pre checkout (must be answered in 10 seconds)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    try:
        await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)
        logging.info(f"Pre-checkout approved for user {pre_checkout_q.from_user.id}")
    except Exception as e:
        logging.error(f"Error in pre-checkout: {e}")
        await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=False, error_message="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞")


# successful payment
async def successful_payment(message: types.Message):
    try:
        user_id = int(message.from_user.id)
        # logging.info(f"SUCCESSFUL PAYMENT for user {user_id}")
        
        payment_info = message.successful_payment
        # logging.info(f"Payment details: {payment_info}")
        
        success = db.update_user_payment_status(user_id)
        
        if success:
            # Import keyboard here to avoid circular imports
            from keyboards import kb_client
            
            await bot.send_message(
                message.chat.id,
                f'‚úÖ –í–∞—à –ø–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n\n'
                f'üéâ –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç ‚Äî –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ!\n'
                f'–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã:\n'
                f'üìå –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –≤–∏–¥–µ–æ–∫—É—Ä—Å—ã\n'
                f'–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ—É—Ä–æ–∫–∏ \n'
                f'üí° –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, —Å–æ–≤–µ—Ç—ã –∏ —Ñ–∏—à–∫–∏\n'
                f'–°—Å—ã–ª–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π –∫–∞–Ω–∞–ª\n'
                f'üéô –ñ–∏–≤—ã–µ —ç—Ñ–∏—Ä—ã –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é\n'
                f'–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –≥–¥–µ –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∏ —Å –∑—É–º\n'
                f'ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —É—á–∞—Å—Ç–∏–µ –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö\n'
                f'–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É \n'
                f'üëâ –ù–µ —Ç–µ—Ä—è–π—Ç–µ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –Ω–∞—á–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n'
                f'–ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏—Ç–µ, –º—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏.\n\n'
                f'üî• –£–¥–∞—á–∏ –∏ –æ—Ç–ª–∏—á–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞!',
                reply_markup=kb_client
            )
            
            logging.info(f"Payment completed and database updated for user {user_id}")
        else:
            await bot.send_message(
                message.chat.id,
                "–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            logging.error(f"Failed to update database for user {user_id}")
    except Exception as e:
        logging.error(f"Error processing successful payment: {e}")
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


# refunded payment
async def refund_payment(message: types.Message):
    try:
        logging.info("REFUND PAYMENT:")
        payment_info = message.refund_payment.dict()
        for k, v in payment_info.items():
            logging.info(f"{k} = {v}")

        await bot.send_message(
            message.chat.id,
            f"‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –≤–æ–∑–≤—Ä–∞—â–µ–Ω!"
        )
    except Exception as e:
        logging.error(f"Error processing refund: {e}")


# Helper function to update user payment status


# Test command to check payment status
async def check_payment_status(message: types.Message):
    try:
        user_id = int(message.from_user.id)
        is_paid = db.record_payment(user_id)
        status = "‚úÖ –û–ø–ª–∞—á–µ–Ω–æ" if is_paid else "‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"
        await bot.send_message(
            message.chat.id,
            f"–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {status}"
        )
    except Exception as e:
        logging.error(f"Error checking payment status: {e}")
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã.")


def handlers_register(dp: Dispatcher):
    print('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –æ–ø–ª–∞—Ç—ã')
    dp.register_message_handler(payment_handler, commands=['buy'])
    dp.register_message_handler(check_payment_status, commands=['check_payment'])
    dp.register_pre_checkout_query_handler(pre_checkout_query, lambda query: True)
    dp.register_message_handler(
        successful_payment,
        content_types=ContentType.SUCCESSFUL_PAYMENT
    )

    dp.register_message_handler(
        refund_payment,
        lambda msg: hasattr(msg, 'refund_payment'),
        content_types=ContentType.SUCCESSFUL_PAYMENT

    )