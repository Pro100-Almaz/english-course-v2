from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, MessageEntity
from magic_filter import F

from create_bot import dp, bot, master_id
from school_database import sqlite_db
from keyboards import kb_manage

"""–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–æ—Ç–∞ —á–µ—Ä–µ–∑ FSM
–í–Ω–µ—Å–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑—É —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Telegram
–í–ª–∞–¥–µ–ª–µ—Ü —à–∫–æ–ª—ã —Å–º–æ–∂–µ—Ç —Å–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∫–∞–Ω–∞–ª–æ–≤ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
–≤ –º–æ–±–∏–ª—å–Ω–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–µ.
"""

ID_MASTER = int(master_id)


class FSMchannel(StatesGroup):
    url           = State()  # Step 1: URL of the channel
    forward       = State()  # Step 2: forwarded message from channel
    title         = State()
    description   = State()
    topic         = State()


class FSMmaterial(StatesGroup):
    channel_selection = State()
    title = State()
    content_type = State()
    content = State()
    file = State()
    discussion_link = State()


class FSMChannelUpdate(StatesGroup):
    choose_channel = State()
    choose_param   = State()
    input_value    = State()
    choose_chapter = State()
    send_video = State()
    chapter_disc = State()


"""–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ–∑—è–∏–Ω–æ–º –±–æ—Ç–∞.
–ü—Ä–æ–≤–µ—Ä–∫–∞ ID_MASTER –ø–æ ID –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
–í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø—Ä–µ—Ç –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ë–æ—Ç–∞ –≤ –¥—Ä—É–≥–∏–µ –≥—Ä—É–ø–ø—ã!
–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /moderate
"""


#@dp.message_handler(commands=['moderate'])
async def verify_owner(message: types.Message):
    id_check = message.from_user.id
    print(id_check)
    if id_check == ID_MASTER:
        await bot.send_message(message.from_user.id, '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ', reply_markup=kb_manage)
        
    else:
        await bot.send_message(message.from_user.id, '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω')
    await message.delete()


"""–§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã, –≤—ã—Ö–æ–¥ –∏–∑ state, –µ—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥—É–º–∞–ª –≤–Ω–æ—Å–∏—Ç—å –ø—Ä–∞–≤–∫–∏ –≤ –±–æ—Ç–∞
"""
#@dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞ –ó–∞–≥—Ä—É–∑–∫–∏'), state="*")
#@dp.message_handler(F.text.contains(['–æ—Ç–º–µ–Ω–∞', 'stop']).lower(), state="*")
async def cancel_state(message: types.Message, state=FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    else:
        await state.finish()
        await message.reply('–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –≤–Ω–µ—Å–µ–Ω—ã')


"""–ó–∞–ø—É—Å–∫ FSM –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–∞—Ö
"""
# –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–Ω–∞–ª–µ
async def add_channel(message: types.Message):
    if message.from_user.id != ID_MASTER:
        return await message.reply("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")

    await FSMchannel.url.set()
    await message.reply(
        "–®–∞–≥ 1/5: –û—Ç–ø—Ä–∞–≤—å—Ç–µ URL –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä https://t.me/my_channel –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É)."
    )


async def load_channel_url(message: types.Message, state: FSMContext):
    if message.from_user.id != ID_MASTER:
        return
    async with state.proxy() as data:
        data['url'] = message.text.strip()
    await FSMchannel.next()
    await message.reply(
        "–®–∞–≥ 2/5: –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –±–æ—Ç —É–∑–Ω–∞–ª –µ–≥–æ numeric ID."
    )


async def load_channel_forward(message: types.Message, state: FSMContext):
    if message.from_user.id != ID_MASTER:
        return

    if not message.forward_from_chat or message.forward_from_chat.type != 'channel':
        return await message.reply("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–º–µ–Ω–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞.")

    channel_chat = message.forward_from_chat
    async with state.proxy() as data:
        data['channel_id'] = channel_chat.id
        data['channel_username'] = getattr(channel_chat, 'username', None)

    # -> move to title entry
    await FSMchannel.next()  # FSMchannel.title
    await message.reply("–®–∞–≥ 3/5: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:")


async def load_channel_title(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['title'] = message.text.strip()
    await FSMchannel.next()  # FSMchannel.description
    await message.reply("–®–∞–≥ 4/5: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:")


async def load_channel_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text.strip()
    await FSMchannel.next()  # FSMchannel.topic
    await message.reply("–®–∞–≥ 5/5: –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∫–∞–Ω–∞–ª–∞:")


async def load_channel_topic(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['topic'] = message.text.strip()
        await sqlite_db.sql_add_commands_channels(state)

    await state.finish()
    await message.reply("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")


"""–ó–∞–ø—É—Å–∫ FSM –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–∞—Ö
"""
async def update_channel(message: types.Message):
    if message.from_user.id != ID_MASTER:
        return await message.reply("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")

    channels = sqlite_db.load_courses_url()

    kb = InlineKeyboardMarkup(row_width=2)
    for name, ch_id in channels.items():
        kb.add(
            InlineKeyboardButton(
                text=name,
                callback_data = f"upd_ch_{ch_id}"
            )
        )

    await FSMChannelUpdate.choose_channel.set()
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å:",
        reply_markup=kb
    )


@dp.callback_query_handler(lambda c: c.data.startswith("upd_ch_"), state=FSMChannelUpdate.choose_channel)
async def process_channel_chosen(cb: types.CallbackQuery, state: FSMContext):
    ch_id = int(cb.data.split("_")[-1])
    await state.update_data(channel_id=ch_id)

    kb = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("üñã –ù–∞–∑–≤–∞–Ω–∏–µ",      callback_data="upd_param_title"),
        InlineKeyboardButton("‚úçÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ",     callback_data="upd_param_description"),
        InlineKeyboardButton("üìö –¢–µ–º–∞",          callback_data="upd_param_topic"),
        InlineKeyboardButton("üö¶ –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", callback_data="upd_param_navigation"),
        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é", callback_data="upd_param_nav_delete"),
        InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ", callback_data="upd_param_video"),
        InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≥–ª–∞–≤—É", callback_data="upd_param_chapter"),
    )
    await FSMChannelUpdate.next()  # -> choose_param
    await cb.message.edit_text("–®–∞–≥ 2/3: –ß—Ç–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å?", reply_markup=kb)
    await cb.answer()


@dp.callback_query_handler(lambda c: c.data.startswith("upd_param_"), state=FSMChannelUpdate.choose_param)
async def process_param_chosen(cb: types.CallbackQuery, state: FSMContext):
    param = cb.data.split("_")[-1]
    await state.update_data(param=param)
    data = await state.get_data()

    prompts = {
        'title':       "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:",
        'description': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:",
        'topic':       "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É –∫–∞–Ω–∞–ª–∞:",
        'pinned':      "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:",
        'navigation': "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (Markdown HTML): \n",
        'video': "–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ",
        'chapter': "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≥–ª–∞–≤—ã",
    }
    if param not in prompts:#–µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ —É–¥–∞–ª–∏—Ç—å
        ch_id = data['channel_id']
        rec = sqlite_db.get_channel_by_id(ch_id)
        if rec['nav_message_id'] is None:
            cb.message.answer("–ù–∞ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç—É –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        else:
            await bot.delete_message(rec['channel_id'], rec['nav_message_id'])
            sqlite_db.update_channel_field(ch_id, 'nav_message_id', None)
            sqlite_db.update_channel_field(ch_id, 'navigation_text', None)
            await cb.message.answer("–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")

        await state.finish()
        return

    if param == 'video':
        kb = InlineKeyboardMarkup(row_width=2)
        rec = sqlite_db.get_channel_by_id(data['channel_id'])
        chapters = sqlite_db.get_chapter_by_channel_id(rec['channel_id'])   #returs a dictionary of chapters from chapters table which contains {channel_id|chapter_name|chapter_message_id} channel_id and chapter_name are unique pair
                                                                            #contains {name: value, mesage_id: value}
        for chapter, chapter_message_id in chapters.items():
            kb.add(InlineKeyboardButton(text=chapter, callback_data=f"chapter_{chapter_message_id}"))
        await cb.message.answer(
            text=prompts[param],
            reply_markup=kb
        )
        await FSMChannelUpdate.choose_chapter.set()
        return

    else :
        await cb.message.answer(prompts[param])
        await FSMChannelUpdate.next()
        await cb.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("chapter_"), state=FSMChannelUpdate.choose_chapter)
async def process_chapter_selection(cb: types.CallbackQuery, state: FSMContext):
    chapter = cb.data.split("_")[-1]
    await state.update_data(chapter=chapter)
    await cb.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ:")#user sends video and then we send it to a chennel and add to navigation
    await FSMChannelUpdate.send_video.set()
    await cb.answer()

@dp.message_handler(state=FSMChannelUpdate.send_video, content_types=types.ContentType.VIDEO)
async def process_send_video(message: types.Message, state: FSMContext):
    await message.answer("–≤–∏–¥–µ–æ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ")
    data = await state.get_data()
    chapter_id = data['chapter']
    rec = sqlite_db.get_channel_by_id(int(data['channel_id']))
    chapter = sqlite_db.get_chapter_from_channel_by_chapter_id(channel_id=rec['channel_id'], chapter_id=chapter_id)
    if chapter is None :
        message.answer("–¢–∞–∫–æ–π –≥–ª–∞–≤—ã –Ω–µ—Ç—É –Ω–∞ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ")
        return
    kb = InlineKeyboardMarkup(row_width=2)

    try:
        sent = await bot.send_video(
            chat_id=rec['channel_id'],
            video=message.video.file_id,
            parse_mode=types.ParseMode.HTML,
        )
        if sent:
            await message.answer("–í–∞—à–µ –≤–∏–¥–µ–æ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ –∫–∞–Ω–∞–ª")
    except Exception as e:
        await message.answer(f"–í–∏–¥–µ–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.\n –ø—Ä–∏—á–∏–Ω–∞:\n{e}")

    videos = sqlite_db.add_material_to_chapter(
        channel_id=rec['channel_id'],
        chapter_name=chapter['chapter_name'],
        message_id=sent.message_id)   #adds message_id to a videos table key is {chapter_name and chapter_video_id} pair is unique
                                    #returns an array of dictionaries of videos in a chapter_name from db contains: {video[id], video['message_id']}

    if videos is None :
        message.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤–∑—è—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ –ë–î")
    print(videos)

    for i, video in enumerate(videos, start=1):
        url = f"https://t.me/c/{rec['channel_id'][4:]}/{video}"
        kb.add(InlineKeyboardButton(text=str(i), url=url))
    print("--------------")
    print(kb)
    try:
        await bot.edit_message_reply_markup(
            chat_id=rec['channel_id'],
            message_id=int(chapter['chapter_message_id']),
            reply_markup=kb
        )
        await message.answer("–í–∞—à–µ –≤–∏–¥–µ–æ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏—é")
    except Exception as e:
        await message.answer(f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≥–ª–∞–≤—ã.\n –ü—Ä–∏—á–∏–Ω–∞:\n{e}")

    await state.finish()


# Step 4) Receive the new value & apply
@dp.message_handler(state=FSMChannelUpdate.input_value)
async def process_update_input(message: types.Message, state: FSMContext):
    data   = await state.get_data()
    ch_id  = data['channel_id']
    param  = data['param']
    newval = message.text.strip()
    kb = InlineKeyboardMarkup(row_width=2)

    if param == 'chapter':
        await state.update_data(chapter_name=newval) #save chapter name into state.data
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–ª–∞–≤—ã:")
        await FSMChannelUpdate.chapter_disc.set() #update state to recieve state discription
        return

    #if there is any hyperlinks add them to inline keyboard

    for entity in message.entities:
        print(entity)
        if entity.type == 'url':
            text = entity.get_text(message.text)
            kb.add(InlineKeyboardButton(text=text, url=text))
        if entity.type == 'text_link':
            text = entity.get_text(message.text)
            kb.add(InlineKeyboardButton(text=text, url=entity.url))

    # 4a) If it‚Äôs a DB field (title/description/topic), update your table
    if param in ('title', 'description', 'topic'):
        await sqlite_db.sql_update_channel_field(ch_id, param, newval)
        await message.reply(f"‚úÖ –ü–æ–ª–µ <b>{param}</b> –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", parse_mode=types.ParseMode.HTML)

    # 4b) If it‚Äôs the pinned message text, edit in Telegram
    else:  # param == 'nav_message'
        # 1) get chat record from DB to know its Telegram chat_id
        rec = sqlite_db.get_channel_by_id(ch_id)
        chat_id = rec['channel_id']  # stored numeric ID or '@username'
        # 2) fetch the current pinned message
        chat    = await bot.get_chat(chat_id)
        pinned  = chat.pinned_message
        if not pinned:
            # nothing pinned yet ‚Üí send & pin
            sent = await bot.send_message(
                chat_id= chat_id,
                text=newval,
                reply_markup=kb,
                parse_mode=types.ParseMode.HTML
            )
            await bot.pin_chat_message(chat_id, sent.message_id, disable_notification=True)
            sqlite_db.update_channel_field(ch_id, 'nav_message_id', sent.message_id)
            await message.reply("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ.")
        else:
            # edit existing pinned
            try:
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=pinned.message_id,
                    text=newval,
                    reply_markup=kb,
                    parse_mode=types.ParseMode.HTML,
                    disable_web_page_preview=True
                )
                sqlite_db.update_channel_field(ch_id, 'nav_message_id', pinned.message_id,)
                await message.reply("‚úÖ –¢–µ–∫—Å—Ç –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—ë–Ω!")
            except Exception as e:
                await bot.send_message("The message you have sent is exactly the same as the pinned message.")


    await state.finish()

@dp.message_handler(state=FSMChannelUpdate.chapter_disc)
async def process_chapter_name(message: types.Message, state: FSMContext):
    discription = message.text.strip()
    data = await state.get_data()
    ch_id = data['channel_id']
    rec = sqlite_db.get_channel_by_id(ch_id) #get channel info from database
    chapter_name = data['chapter_name']
    chat = await bot.get_chat(rec['channel_id'])
    pinned = chat.pinned_message# info on the channel navigation message
    # kb = InlineKeyboardMarkup(row_width=2)

    sent = await bot.send_message( #send chapter navifation message and save the message
        chat_id=ch_id,
        text=chapter_name + "\n" + discription,
        parse_mode = types.ParseMode.HTML,
        disable_web_page_preview = True
    )
    await message.answer("–ù–∞–≤–∏–≥–∞—Ü–∏—è –≥–ª–∞–≤—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É!")

    sqlite_db.add_chapter_by_channel_id(int(rec['channel_id']), chapter_name, int(sent.message_id)) # save chapter information to database

    await message.answer("–ì–ª–∞–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")

    current_markup = pinned.reply_markup
    url = f"https://t.me/c/{rec['channel_id'][4:]}/{sent.message_id}"
    current_markup.add(InlineKeyboardButton(text=chapter_name, url=url))

    try:
        await bot.edit_message_reply_markup( # edit navigation message to add chapter buttons
            chat_id=ch_id,
            message_id=pinned.message_id,
            reply_markup=current_markup
        )
        await message.answer("–ì–ª–∞–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫–∞–Ω–∞–ª–∞!")
    except Exception as e:
        await message.answer(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å. \n –æ—à–∏–±–∫–∞: \n {e}")
    await state.finish()


"""–ó–∞–ø—É—Å–∫ FSM –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
"""
# –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç–µ—Ä–∏–∞–ª–µ
async def add_material(message: types.Message):
    print(f"add_material called by user {message.from_user.id}")  # Debug print
    if message.from_user.id == ID_MASTER:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
            channels = await sqlite_db.get_channels_for_materials()
            if not channels:
                await message.reply('–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª!')
                return
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏
            keyboard = InlineKeyboardMarkup()
            for channel_id, title in channels:
                keyboard.add(InlineKeyboardButton(title, callback_data=f'select_channel_{channel_id}'))
            
            # Add a test button
            keyboard.add(InlineKeyboardButton("Test Button", callback_data='test_button'))
            
            await FSMmaterial.channel_selection.set()
            await message.reply(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–Ω–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}):', reply_markup=keyboard)
        except Exception as e:
            await message.reply(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {str(e)}')
    else:
        await message.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω')


# Test callback handler to see if any callbacks are being received
async def test_callback(callback_query: types.CallbackQuery):
    print(f"Test callback received: {callback_query.data}")
    await callback_query.answer("Test callback received!")


# Alternative callback handlers using decorators
@dp.callback_query_handler(lambda c: c.data == 'test_button')
async def test_callback_decorator(callback_query: types.CallbackQuery):
    print(f"Decorator test callback received: {callback_query.data}")
    await callback_query.answer("Decorator test callback received!")


@dp.callback_query_handler(lambda c: c.data.startswith('select_channel_'))
async def process_channel_selection_decorator(callback_query: types.CallbackQuery, state=FSMContext):
    print(f"Decorator channel selection callback received: {callback_query.data}")
    if callback_query.from_user.id == ID_MASTER:
        try:
            channel_id = callback_query.data.replace('select_channel_', '')
            print(f"Selected channel_id: {channel_id}")
            async with state.proxy() as data_material:
                data_material['channel_id'] = channel_id
            
            await FSMmaterial.next()
            await callback_query.message.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞')
            await callback_query.answer()
        except Exception as e:
            print(f"Error in decorator process_channel_selection: {e}")
            await callback_query.message.reply(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–Ω–∞–ª–∞: {str(e)}')
            await callback_query.answer()
    else:
        await callback_query.answer('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω')


# –ë–æ—Ç –ª–æ–≤–∏—Ç –æ—Ç–≤–µ—Ç –∏ –ø–∏—à–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
async def load_material_title(message: types.Message, state=FSMContext):
    if message.from_user.id == ID_MASTER:
        async with state.proxy() as data_material:
            data_material['title'] = message.text
        await FSMmaterial.next()
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:\n1. –¢–µ–∫—Å—Ç\n2. –§–æ—Ç–æ\n3. –î–æ–∫—É–º–µ–Ω—Ç\n4. –í–∏–¥–µ–æ\n5. –ê—É–¥–∏–æ\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä (1-5)')


# –ë–æ—Ç –ª–æ–≤–∏—Ç –æ—Ç–≤–µ—Ç –∏ –ø–∏—à–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
async def load_content_type(message: types.Message, state=FSMContext):
    if message.from_user.id == ID_MASTER:
        content_types = {
            '1': 'text',
            '2': 'photo', 
            '3': 'document',
            '4': 'video',
            '5': 'audio'
        }
        
        if message.text not in content_types:
            await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5')
            return
            
        async with state.proxy() as data_material:
            data_material['content_type'] = content_types[message.text]
        
        await FSMmaterial.next()
        await message.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç, –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ)')


# –ë–æ—Ç –ª–æ–≤–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
async def load_content(message: types.Message, state=FSMContext):
    if message.from_user.id == ID_MASTER:
        async with state.proxy() as data_material:
            if message.content_type == 'text':
                data_material['content'] = message.text
                data_material['file_id'] = None
            elif message.content_type == 'photo':
                data_material['content'] = message.caption or ''
                data_material['file_id'] = message.photo[0].file_id
            elif message.content_type == 'document':
                data_material['content'] = message.caption or ''
                data_material['file_id'] = message.document.file_id
            elif message.content_type == 'video':
                data_material['content'] = message.caption or ''
                data_material['file_id'] = message.video.file_id
            elif message.content_type == 'audio':
                data_material['content'] = message.caption or ''
                data_material['file_id'] = message.audio.file_id
            else:
                await message.reply('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞')
                return
        
        await FSMmaterial.next()
        await message.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞')


# –ë–æ—Ç –ª–æ–≤–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª
async def load_discussion_link(message: types.Message, state=FSMContext):
    if message.from_user.id == ID_MASTER:
        async with state.proxy() as data_material:
            data_material['discussion_link'] = message.text

        await sqlite_db.sql_add_commands_materials(state)
        await state.finish()
        await message.reply(f'–ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ: {message.text}')


"""–ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã —Å–≤–µ–¥–µ–Ω–∏–π –æ –∫–∞–Ω–∞–ª–∞—Ö
"""

#@dp.callback_query_handler(lambda x: x.data and x.data.startswith('del_channel '))
async def inform_delete_callback_channels(callback_query: types.CallbackQuery):
    await sqlite_db.delete_channel(callback_query.data.replace('del_channel_', ''))
    await callback_query.answer(text=f'–∫–∞–Ω–∞–ª {callback_query.data.replace("del_channel_", "")} —É–¥–∞–ª–µ–Ω')
    

#@dp.message_handler(Text(equals='–£–¥–∞–ª–∏—Ç—å –ö–∞–Ω–∞–ª', ignore_case=True))
async def delete_channel_info(message: types.Message):
    if message.from_user.id == ID_MASTER:
        info = await sqlite_db.choose_delete_channels()
        for info_ch in info:
            await bot.send_message(message.from_user.id, f'{info_ch[1]}\nID: {info_ch[0]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {info_ch[2]}')
            await bot.send_message(message.from_user.id, text='–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª?', reply_markup=InlineKeyboardMarkup().\
                add(InlineKeyboardButton(f'delete {info_ch[0]}', callback_data=f'del_channel_{info_ch[0]}')))


#@dp.message_handler(Text(equals='–ü—Ä–æ—Å–º–æ—Ç—Ä –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤', ignore_case=True))
async def view_materials(message: types.Message):
    if message.from_user.id == ID_MASTER:
        await sqlite_db.sql_read_materials(message)


#@dp.message_handler(Text(equals='–ü—Ä–æ—Å–º–æ—Ç—Ä –ö–∞–Ω–∞–ª–æ–≤', ignore_case=True))
async def view_channels(message: types.Message):
    if message.from_user.id == ID_MASTER:
        await sqlite_db.sql_read_from_channels(message)


# Test message handler
async def test_message(message: types.Message):
    print(f"Test message received: {message.text}")
    await message.reply("Test message received!")


"""–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
"""


def handlers_register_manage(dp: Dispatcher):
    # FSM –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
    dp.register_message_handler(verify_owner, commands=['moderate'])
    dp.register_message_handler(
        cancel_state, Text(equals='–û—Ç–º–µ–Ω–∞ –ó–∞–≥—Ä—É–∑–∫–∏'), state="*")
    dp.register_message_handler(cancel_state, F.text.contains(
        ['–æ—Ç–º–µ–Ω–∞', 'stop']).lower(), state="*")

    dp.register_message_handler(add_channel, Text(equals='–î–æ–±–∞–≤–∏—Ç—å –ö–∞–Ω–∞–ª', ignore_case=True), state=None)
    dp.register_message_handler(load_channel_url, state=FSMchannel.url)
    dp.register_message_handler(load_channel_forward, content_types=types.ContentTypes.ANY, state=FSMchannel.forward)
    dp.register_message_handler(load_channel_title, state=FSMchannel.title)
    dp.register_message_handler(load_channel_description, state=FSMchannel.description)
    dp.register_message_handler(load_channel_topic, state=FSMchannel.topic)

    dp.register_message_handler(update_channel,
                                Text(equals='–û–±–Ω–æ–≤–∏—Ç—å –ö–∞–Ω–∞–ª', ignore_case=True), state=None)

    dp.register_callback_query_handler(
        process_channel_chosen,
        lambda c: c.data.startswith("upd_ch_"),
        state=FSMChannelUpdate.choose_channel)

    dp.register_callback_query_handler(
        process_param_chosen,
        lambda c: c.data.startswith("upd_param_"),
        state=FSMChannelUpdate.choose_param)

    dp.register_message_handler(
        process_update_input,
        state=FSMChannelUpdate.input_value)
    
    # FSM –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    dp.register_message_handler(add_material, Text(equals='–î–æ–±–∞–≤–∏—Ç—å –ú–∞—Ç–µ—Ä–∏–∞–ª', ignore_case=True), state=None)
    dp.register_message_handler(load_material_title, state=FSMmaterial.title)
    dp.register_message_handler(load_content_type, state=FSMmaterial.content_type)
    dp.register_message_handler(load_content, content_types=['text', 'photo', 'document', 'video', 'audio'], state=FSMmaterial.content)
    dp.register_message_handler(load_discussion_link, state=FSMmaterial.discussion_link)
    
    # Callback query handlers - register them separately
    dp.register_callback_query_handler(process_channel_selection_decorator, lambda c: c.data.startswith('select_channel_'))
    dp.register_callback_query_handler(test_callback_decorator, lambda c: c.data == 'test_button')
    dp.register_callback_query_handler(inform_delete_callback_channels, lambda c: c.data.startswith('del_channel_'))
    
    dp.register_message_handler(delete_channel_info, Text(equals='–£–¥–∞–ª–∏—Ç—å –ö–∞–Ω–∞–ª', ignore_case=True))
    dp.register_message_handler(view_materials, Text(equals='–ü—Ä–æ—Å–º–æ—Ç—Ä –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤', ignore_case=True))
    dp.register_message_handler(view_channels, Text(equals='–ü—Ä–æ—Å–º–æ—Ç—Ä –ö–∞–Ω–∞–ª–æ–≤', ignore_case=True))
    dp.register_message_handler(test_message, Text(equals='test', ignore_case=True))

